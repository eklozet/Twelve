term : type.
form : type.

tru : form.
fal : form.
not : form -> form.
and : form -> form -> form.
ior : form -> form -> form.
imp : form -> form -> form.
all : (term -> form) -> form.
one : (term -> form) -> form.

%{ negation ecoded as implying false
%abbrev
not : form -> form = [A : form] imp A fal.
}%

%abbrev
equ : form -> form -> form =
  [A : form]
    [B : form]
      and (imp A B) (imp B A).


valid : form -> type.

tru_i : valid tru.

fal_e : valid fal -> valid A.

not_i : (valid A -> {p : form} valid p) -> valid (not A).
not_e : valid (not A) -> valid A -> {C : form} valid C.

and_i  : valid A -> valid B -> valid (and A B).
and_e1 : valid (and A B) -> valid P.
and_e2 : valid (and A B) -> valid B.

ior_i1 : valid A -> valid (ior A B).
ior_i2 : valid B -> valid (ior A B).
ior_e  : valid (ior A B)
      -> (valid A -> valid C)
      -> (valid B -> valid C)
      -> valid C.

imp_i : (valid A -> valid B) -> valid (imp A B).
imp_e : valid (imp A B) -> valid A -> valid B.

all_i : ({t : term} valid (A t)) -> valid (all ([x : term] A x)).
all_e : valid (all ([x : term] A x)) -> ({t : term} valid (A t)).

% Note the scoping difference of {\{t : term\}} in {all_i} and {one_i}.  For
% {all_i}, the first argument must be a function from any term {t} to a proof
% of the validity of {(A t)}.  For {one_i}, the first two arguments should be
% the witness term {t} and a proof of the validity of {(A t)}.

one_i : {t : term} valid (A t) -> valid (one ([x : term] A x)).
one_e : valid (one ([x : term] A x))
     -> ({t : term} valid (A t) -> valid C)
     -> valid C.


s_combinator : valid (imp A B) -> valid (imp A (imp B C)) -> valid A -> valid C
  = [p : valid (imp A B)]
      [q : valid (imp A (imp B C))]
        [r : valid A]
          imp_e (imp_e q r) (imp_e p r).

transitivity : valid (imp A B) -> valid (imp B C) -> valid (imp A C) =
  [p : valid (imp A B)]
    [q : valid (imp B C)]
      imp_i ([r : valid A]
              imp_e q (imp_e p r) ).

weakening : valid (imp A B) -> valid (imp A (imp C B)) =
  [p : valid (imp A B)]
    imp_i ([q : valid A]
            imp_i ([_ : valid C]
                    imp_e p q ) ).

identity : valid (imp A A) =
  imp_i ([p : valid A] p).

contraction : valid (imp A (imp A B)) -> valid (imp A B) =
  [p : valid (imp A (imp A B))]
    imp_i ([q : valid A]
            imp_e (imp_e p q) q ).

exchange : valid (imp A (imp B C)) -> valid (imp B (imp A C)) =
  [p : valid (imp A (imp B C))]
    imp_i ([q : valid B]
            imp_i ([r : valid A]
                    imp_e (imp_e p r) q) ).

and_symmetry : valid (and A B) -> valid (and B A) =
  [p : valid (and A B)]
    and_i (and_e2 p) (and_e1 p).

curry : valid (imp (and A B) C) -> valid (imp A (imp B C)) =
  [p : valid (imp (and A B) C)]
    imp_i ([q : valid A]
            imp_i ([r : valid B] imp_e p (and_i q r)) ).

uncurry : valid (imp A (imp B C)) -> valid (imp (and A B) C)
  = [p : valid (imp A (imp B C))]
      imp_i ([q : valid (and A B)]
              imp_e (imp_e p (and_e1 q)) (and_e2 q) ).

ior_not_imp : valid (ior (not A) B) -> valid (imp A B) =
  [p : valid (ior (not A) B)]
    imp_i ([q : valid A]
            ior_e p ([r : valid (not A)]
                      fal_e (not_e r q) )
                    ([s : valid B] s) ).

